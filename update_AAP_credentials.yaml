---
- name: Update AAP credentials using API
  hosts: localhost
  gather_facts: false

  vars:
    AAP_IP: ""
    AAP_TOKEN: ""
    GIT_SERVER: GIT1 # GIT1 or GIT2 passed as extra_vars to know which server to failover to
    git_token_file_contents: ""

  tasks:
    - name: Get all credentials that are Source Control in AAP
      ansible.builtin.uri:
        url: "https://{{ AAP_IP }}/api/v2/credentials/?credential_type__namespace=scm"
        method: GET
        return_content: true
        headers:
          Content-Type: application/json
          Authorization: Bearer {{ AAP_TOKEN }}
        validate_certs: false
      register: credentials_res

    - name: Debug credentials_res
      ansible.builtin.debug:
        msg: "{{ credentials_res }}"

    - name: Read csv file contents if failover to GIT1
      ansible.builtin.set_fact:
        git_token_file_contents: "{{ lookup('ansible.builtin.file', 'files/gitlab1.csv').splitlines() }}"
      when: GIT_SERVER == "GIT1"

    - name: Read csv file contents if failover to GIT2
      ansible.builtin.set_fact:
        git_token_file_contents: "{{ lookup('ansible.builtin.file', 'files/gitlab2.csv').splitlines() }}"
      when: GIT_SERVER == "GIT2"

    - name: Debug git_token_file_contents
      ansible.builtin.debug:
        msg: "{{ git_token_file_contents }}"

    - name: Set CSV header and rows
      set_fact:
        csv_header: "{{ git_token_file_contents[0].split(',') | map('trim') | list }}"
        csv_rows: "{{ git_token_file_contents[1:] }}"

    - name: Create credentials object list
      ansible.builtin.set_fact:
        credentials_obj_list: "{{ credentials_res.json.results }}"

    - name: Extract name, id, inputs from credentials_obj_list
      ansible.builtin.set_fact:
        filtered_credentials_list: "{{ filtered_credentials_list | default([]) + [{'name': item.name, 'id': item.id, 'inputs': item.inputs, 'credential_type': item.credential_type}] }}"
      loop: "{{ credentials_obj_list }}"

    - name: Debug filtered_credentials_list
      ansible.builtin.debug:
        msg: "{{ filtered_credentials_list }}"

    - name: Convert CSV rows into list of dicts (csv_data)
      set_fact:
        csv_data: "{{ csv_data | default([]) + [dict(_zipped)] }}"
      vars:
        _zipped: "{{ csv_header | zip(row.split(',') | map('trim') | list) | list }}"
      loop: "{{ csv_rows }}"
      loop_control:
        loop_var: row

    - name: Debug csv_data
      ansible.builtin.debug:
        msg: "{{ csv_data }}"

    - name: Merge tokens into credentials based on csv_data
      set_fact:
        updated_users: "{{ updated_users | default([]) + [ updated_cred ] }}"
      vars:
        matched_cred: >-
          {{
            filtered_credentials_list
            | selectattr('name', 'search', item.user)
            | list
            | first
            | default({})
          }}
        updated_cred: >-
          {{
            matched_cred
            | combine({
                'inputs': matched_cred.inputs | combine({
                  'ssh_key_data': item.token
                })
              })
          }}
      when: matched_cred != {}
      loop: "{{ csv_data }}"
      loop_control:
        label: "{{ item.user }}"

    - name: Display updated_users
      ansible.builtin.debug:
        var: updated_users

    - name: Update the credentials on AAP
      ansible.builtin.uri:
        url: "https://{{ AAP_IP }}/api/v2/credentials/{{ item['id'] }}"
        method: PATCH
        body:
          name: "{{ item['name'] }}"
          credential_type: "{{ item['credential_type'] }}"
          inputs:
            username: "{{ item['inputs']['username'] }}"
            ssh_key_data: "{{ item['inputs']['ssh_key_data'] }}"
        return_content: true
        headers:
          Content-Type: application/json
          Authorization: Bearer {{ AAP_TOKEN }}
        body_format: json
        validate_certs: false
      loop: "{{ updated_users }}"
